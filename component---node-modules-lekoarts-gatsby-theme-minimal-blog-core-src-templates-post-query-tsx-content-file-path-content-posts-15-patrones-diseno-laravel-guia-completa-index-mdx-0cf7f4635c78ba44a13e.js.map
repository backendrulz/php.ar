{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-15-patrones-diseno-laravel-guia-completa-index-mdx-0cf7f4635c78ba44a13e.js","mappings":"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","sources":["webpack://minimal-blog/./content/posts/15-patrones-diseno-laravel-guia-completa/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    hr: \"hr\",\n    h2: \"h2\",\n    h3: \"h3\",\n    strong: \"strong\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Introducción\"), \"\\n\", React.createElement(_components.p, null, \"Los patrones de diseño son soluciones probadas para problemas comunes en el desarrollo de software. En Laravel, estos patrones no solo mejoran la estructura del código, sino que también promueven buenas prácticas de programación. Al entender y aplicar estos patrones, puedes construir aplicaciones más limpias, escalables y fáciles de mantener.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"Patrones de Creación en Laravel\"), \"\\n\", React.createElement(_components.h3, null, \"1. Patrón Factory\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Factory Pattern\"), \" se utiliza para crear objetos sin especificar la clase exacta a instanciar. Laravel aprovecha este patrón en Model Factories para generar datos falsos para pruebas y llenado de bases de datos (seeding).\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Reutilización\"), \": Centraliza la lógica de creación de objetos, reduciendo la duplicación de código.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Flexibilidad\"), \": Facilita cambiar la lógica de creación de objetos en un solo lugar.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Pruebas\"), \": Simplifica la creación de datos de prueba.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Un uso excesivo puede llevar a abstracciones innecesarias.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Dependencias Ocultas\"), \": Puede ocultar dependencias si no se documenta adecuadamente.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Generar datos falsos de usuarios para pruebas o llenado de la base de datos.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// database/factories/UserFactory.php\\n// Este archivo define un Factory para generar datos falsos de usuarios.\\nuse Illuminate\\\\Database\\\\Eloquent\\\\Factories\\\\Factory;\\nuse Illuminate\\\\Support\\\\Str;\\nuse App\\\\Models\\\\User;\\n\\nclass UserFactory extends Factory\\n{\\n    protected $model = User::class;\\n\\n    public function definition()\\n    {\\n        return [\\n            'name' => $this->faker->name(),\\n            'email' => $this->faker->unique()->safeEmail(),\\n            'password' => bcrypt('password'),\\n            'remember_token' => Str::random(10),\\n        ];\\n    }\\n}\\n\\n// Crear un solo usuario\\nUser::factory()->create();\\n\\n// Crear múltiples usuarios\\nUser::factory()->count(10)->create();\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra cómo Laravel utiliza Factories para generar datos falsos de manera eficiente.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"2. Patrón Singleton\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Singleton Pattern\"), \" garantiza que una clase tenga solo una instancia durante toda la aplicación. Laravel utiliza este patrón en el Service Container, la configuración y la gestión de conexiones a bases de datos para mantener una única instancia compartida.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Eficiencia de Recursos\"), \": Reduce el uso de memoria al reutilizar una sola instancia.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Acceso Global\"), \": Proporciona un único punto de acceso a la instancia.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Estado Global\"), \": Puede introducir dependencias ocultas, dificultando las pruebas.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Acoplamiento Fuerte\"), \": Un uso excesivo puede llevar a un código fuertemente acoplado.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Compartir una única instancia del servicio de caché en toda la aplicación.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"namespace App\\\\Services;\\n\\nclass PaymentGateway\\n{\\n    private static ?self $instance = null;\\n\\n    private function __construct() {} // Evita la instanciación directa\\n\\n    public static function getInstance(): self\\n    {\\n        if (self::$instance === null) {\\n            self::$instance = new self();\\n        }\\n        return self::$instance;\\n    }\\n\\n    public function processPayment($amount)\\n    {\\n        return \\\"Processing payment of $amount\\\";\\n    }\\n}\\n\\n// Usando el Singleton en un Controlador\\nuse App\\\\Services\\\\PaymentGateway;\\n\\n$gateway = PaymentGateway::getInstance();\\necho $gateway->processPayment(100);\\n\\n// Cómo Laravel usa Singletons (Ejemplo del Service Container)\\napp()->singleton('CustomLogger', function () {\\n    return new \\\\App\\\\Services\\\\CustomLogger();\\n});\\n\\n// Recuperando la instancia singleton\\n$logger = app('CustomLogger');\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo demuestra cómo implementar y utilizar un Singleton en Laravel.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"3. Patrón Builder\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Builder Pattern\"), \" construye objetos complejos paso a paso. En Laravel, el Query Builder es un ejemplo destacado, permitiéndote construir consultas a bases de datos de manera fluida.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Legibilidad\"), \": Proporciona una interfaz fluida e intuitiva para construir objetos.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Separación de Responsabilidades\"), \": Separa la lógica de construcción de la representación.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Sobrecarga\"), \": Añade una capa adicional de abstracción, que puede parecer innecesaria para consultas simples.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Puede volverse verboso para consultas muy complejas.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Construir consultas complejas a bases de datos sin escribir SQL crudo.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"use Illuminate\\\\Support\\\\Facades\\\\DB;\\n\\n$users = DB::table('users')\\n    ->where('status', 'active')\\n    ->whereBetween('created_at', ['2023-01-01', '2023-12-31'])\\n    ->orderBy('name', 'asc')\\n    ->get();\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra cómo el Query Builder simplifica la construcción de consultas complejas.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"4. Patrón Prototype\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Prototype Pattern\"), \" se utiliza cuando necesitas clonar objetos existentes en lugar de crear nuevos desde cero. El ORM Eloquent de Laravel admite este patrón mediante el método \", React.createElement(_components.code, null, \"replicate()\"), \".\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Rendimiento\"), \": Clonar suele ser más rápido que crear objetos nuevos desde cero.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Simplicidad\"), \": Simplifica la creación de objetos similares.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Requiere un manejo cuidadoso entre clonación profunda y superficial.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Casos de Uso Limitados\"), \": No es tan ampliamente aplicable como otros patrones de creación.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Crear una copia de un usuario existente con modificaciones menores.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"$originalUser = User::find(1);\\n$newUser = $originalUser->replicate();\\n$newUser->email = 'newemail@example.com';\\n$newUser->save();\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo ilustra cómo clonar un objeto existente en Laravel.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"5. Patrón Object Pool\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Object Pool Pattern\"), \" gestiona un grupo de objetos reutilizables, reduciendo la sobrecarga de crear y destruir objetos frecuentemente. En Laravel, esto puede ser útil para gestionar conexiones a bases de datos u otros objetos intensivos en recursos.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Rendimiento\"), \": Reduce el costo de crear y destruir objetos.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Gestión de Recursos\"), \": Administra eficientemente recursos limitados.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Requiere un manejo cuidadoso del grupo de objetos.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Sobrecarga\"), \": Añade complejidad a la aplicación.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Gestionar un grupo de conexiones a bases de datos para mejorar el rendimiento.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// Pseudo-código para un grupo de objetos\\n$pool = new ObjectPool();\\n$connection = $pool->get(); // Reutiliza una conexión existente\\n$pool->release($connection); // Devuelve la conexión al grupo\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra el concepto detrás del Object Pool Pattern.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"Patrones Estructurales en Laravel\"), \"\\n\", React.createElement(_components.h3, null, \"6. Patrón Repository\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Repository Pattern\"), \" separa la lógica de la base de datos de los controladores, proporcionando una capa de abstracción limpia para interactuar con los datos.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Separación de Responsabilidades\"), \": Mejora la mantenibilidad al centralizar la lógica de acceso a datos.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Testabilidad\"), \": Facilita las pruebas al desacoplar la lógica de la base de datos.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Abstracción Innecesaria\"), \": Puede añadir complejidad en aplicaciones simples.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Curva de Aprendizaje\"), \": Requiere comprender conceptos como inyección de dependencias.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Obtener usuarios activos sin sobrecargar el controlador con lógica de la base de datos.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// UserRepository.php\\n// Este archivo define un Repository para manejar consultas relacionadas con usuarios.\\nclass UserRepository {\\n    public function getActiveUsers() {\\n        return User::where('active', 1)->get();\\n    }\\n}\\n\\n// UserController.php\\n// Este archivo define un controlador que utiliza el Repository para obtener datos.\\nclass UserController {\\n    protected $userRepository;\\n\\n    public function __construct(UserRepository $userRepository) {\\n        $this->userRepository = $userRepository;\\n    }\\n\\n    public function index() {\\n        $activeUsers = $this->userRepository->getActiveUsers();\\n        return view('users.index', compact('activeUsers'));\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra cómo el Repository Pattern mejora la organización del código.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"7. Patrón Facade\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Facade Pattern\"), \" proporciona una interfaz simplificada para sistemas complejos. Laravel utiliza facades para acceder a servicios del contenedor de forma fácil.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Simplicidad\"), \": Simplifica el acceso a servicios complejos.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Centralización\"), \": Proporciona un punto único de acceso a funcionalidades.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Ocultación de Dependencias\"), \": Puede ocultar dependencias clave.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Dificultad en Pruebas\"), \": Puede complicar las pruebas unitarias si no se usa correctamente.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Acceder a servicios del contenedor de Laravel de manera sencilla.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// Ejemplo de uso de un Facade en Laravel\\nuse Illuminate\\\\Support\\\\Facades\\\\Cache;\\n\\nCache::put('key', 'value', 60); // Guarda un valor en caché\\n$value = Cache::get('key');     // Obtiene un valor de caché\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra cómo los facades simplifican el acceso a servicios.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"8. Patrón Adapter\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Adapter Pattern\"), \" permite que clases con interfaces incompatibles trabajen juntas. Laravel lo utiliza para integrar diferentes drivers de caché o bases de datos.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Compatibilidad\"), \": Permite integrar sistemas incompatibles.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Extensibilidad\"), \": Facilita la adición de nuevos adaptadores.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Añade una capa adicional de abstracción.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Rendimiento\"), \": Puede introducir una ligera sobrecarga.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Integrar múltiples sistemas de caché (Redis, Memcached) bajo una interfaz común.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// Ejemplo de uso del Adapter Pattern\\ninterface CacheAdapter {\\n    public function get($key);\\n    public function put($key, $value, $minutes);\\n}\\n\\nclass RedisCacheAdapter implements CacheAdapter {\\n    public function get($key) { /* Implementación */ }\\n    public function put($key, $value, $minutes) { /* Implementación */ }\\n}\\n\\nclass MemcachedCacheAdapter implements CacheAdapter {\\n    public function get($key) { /* Implementación */ }\\n    public function put($key, $value, $minutes) { /* Implementación */ }\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra cómo el Adapter Pattern permite integrar sistemas incompatibles.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"9. Patrón Bridge\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Bridge Pattern\"), \" separa una abstracción de su implementación para que ambas puedan variar independientemente. Laravel lo utiliza para separar la lógica de negocio de la implementación técnica.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Flexibilidad\"), \": Permite cambiar implementaciones sin afectar la abstracción.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Escalabilidad\"), \": Facilita la extensión del sistema.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Añade una capa adicional de abstracción.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Curva de Aprendizaje\"), \": Requiere comprender la separación entre abstracción e implementación.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Separar la lógica de notificaciones de sus canales de envío (correo, SMS).\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// Ejemplo de uso del Bridge Pattern\\ninterface NotificationSender {\\n    public function send($message);\\n}\\n\\nclass EmailNotification implements NotificationSender {\\n    public function send($message) { /* Implementación */ }\\n}\\n\\nclass SmsNotification implements NotificationSender {\\n    public function send($message) { /* Implementación */ }\\n}\\n\\nclass NotificationService {\\n    protected $sender;\\n\\n    public function __construct(NotificationSender $sender) {\\n        $this->sender = $sender;\\n    }\\n\\n    public function notify($message) {\\n        $this->sender->send($message);\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra cómo el Bridge Pattern separa la lógica de negocio de la implementación técnica.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"10. Patrón Dependency Injection\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Dependency Injection Pattern\"), \" inyecta dependencias en una clase en lugar de crearlas dentro de la misma. Laravel lo utiliza ampliamente en el Service Container.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Testabilidad\"), \": Facilita las pruebas al permitir la inyección de mocks.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Desacoplamiento\"), \": Reduce el acoplamiento entre clases.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Verbosidad\"), \": Puede llevar a constructores largos.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Requiere comprender el Service Container.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Inyectar un repositorio en un controlador para obtener datos.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// Ejemplo de Dependency Injection\\nclass UserController {\\n    protected $userRepository;\\n\\n    public function __construct(UserRepository $userRepository) {\\n        $this->userRepository = $userRepository;\\n    }\\n\\n    public function index() {\\n        $users = $this->userRepository->getAll();\\n        return view('users.index', compact('users'));\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra cómo la inyección de dependencias mejora la testabilidad y el desacoplamiento.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"Patrones de Comportamiento en Laravel\"), \"\\n\", React.createElement(_components.h3, null, \"11. Patrón Observer\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Observer Pattern\"), \" permite que un objeto notifique a otros objetos sobre cambios en su estado. Laravel utiliza este patrón en su sistema de eventos.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Desacoplamiento\"), \": Separa la lógica de notificación de la lógica principal.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Escalabilidad\"), \": Facilita la extensión del sistema.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Puede volverse difícil de depurar si hay muchos observadores.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Rendimiento\"), \": Puede introducir una ligera sobrecarga.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Notificar a los administradores cuando un nuevo usuario se registra.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// Evento: UserRegistered.php\\nclass UserRegistered {\\n    public $user;\\n\\n    public function __construct($user) {\\n        $this->user = $user;\\n    }\\n}\\n\\n// Listener: SendWelcomeEmail.php\\nclass SendWelcomeEmail {\\n    public function handle($event) {\\n        Mail::to($event->user->email)->send(new WelcomeEmail());\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra cómo implementar el patrón Observer en Laravel.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"12. Patrón Strategy\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Strategy Pattern\"), \" define una familia de algoritmos, encapsula cada uno de ellos y los hace intercambiables. Laravel lo utiliza para implementar diferentes estrategias de autenticación.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Flexibilidad\"), \": Permite cambiar algoritmos en tiempo de ejecución.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Reusabilidad\"), \": Encapsula algoritmos para su reutilización.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Añade una capa adicional de abstracción.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Verbosidad\"), \": Puede requerir muchas clases pequeñas.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Implementar diferentes estrategias de autenticación (OAuth, JWT).\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// Ejemplo de uso del Strategy Pattern\\ninterface AuthenticationStrategy {\\n    public function authenticate($credentials);\\n}\\n\\nclass JwtAuthentication implements AuthenticationStrategy {\\n    public function authenticate($credentials) { /* Implementación */ }\\n}\\n\\nclass OAuthAuthentication implements AuthenticationStrategy {\\n    public function authenticate($credentials) { /* Implementación */ }\\n}\\n\\nclass AuthService {\\n    protected $strategy;\\n\\n    public function setStrategy(AuthenticationStrategy $strategy) {\\n        $this->strategy = $strategy;\\n    }\\n\\n    public function login($credentials) {\\n        return $this->strategy->authenticate($credentials);\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra cómo el Strategy Pattern permite cambiar algoritmos dinámicamente.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"13. Patrón Command\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Command Pattern\"), \" encapsula una solicitud como un objeto, permitiendo parametrizar clientes con diferentes solicitudes. Laravel lo utiliza en los comandos Artisan.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Reutilización\"), \": Encapsula comandos como objetos para su reutilización.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Extensibilidad\"), \": Facilita la adición de nuevos comandos.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Sobrecarga\"), \": Añade una capa adicional de abstracción.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Puede llevar a clases infladas si no se gestiona correctamente.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Automatizar respaldos de bases de datos a través de la CLI.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// Ejemplo de uso del Command Pattern\\nclass BackupDatabaseCommand {\\n    public function execute() {\\n        echo \\\"Backing up the database...\\\\n\\\";\\n    }\\n}\\n\\nclass CommandRunner {\\n    public function run($command) {\\n        $command->execute();\\n    }\\n}\\n\\n$command = new BackupDatabaseCommand();\\n$runner = new CommandRunner();\\n$runner->run($command);\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Comentario:\"), \" Este ejemplo muestra cómo el Command Pattern encapsula solicitudes como objetos.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"14. Patrón Chain of Responsibility\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Chain of Responsibility Pattern\"), \" permite pasar una solicitud a través de una cadena de manejadores, donde cada manejador procesa la solicitud o la pasa al siguiente. Laravel lo implementa usando Pipelines.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Flexibilidad\"), \": Permite agregar o eliminar manejadores dinámicamente.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Desacoplamiento\"), \": Separa la lógica de procesamiento de la invocación.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Puede volverse difícil de depurar si la cadena es larga.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Rendimiento\"), \": Puede introducir una ligera sobrecarga.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Procesar solicitudes API a través de múltiples capas de validación y transformación.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// Ejemplo de uso del Chain of Responsibility Pattern\\ninterface Handler {\\n    public function setNext(Handler $handler);\\n    public function handle($request);\\n}\\n\\nclass ValidationHandler implements Handler {\\n    private $nextHandler;\\n\\n    public function setNext(Handler $handler) {\\n        $this->nextHandler = $handler;\\n    }\\n\\n    public function handle($request) {\\n        if (!$this->validate($request)) {\\n            echo \\\"Validation failed.\\\\n\\\";\\n            return;\\n        }\\n        if ($this->nextHandler) {\\n            $this->nextHandler->handle($request);\\n        }\\n    }\\n\\n    private function validate($request) {\\n        // Lógica de validación\\n        return true;\\n    }\\n}\\n\\nclass TransformationHandler implements Handler {\\n    private $nextHandler;\\n\\n    public function setNext(Handler $handler) {\\n        $this->nextHandler = $handler;\\n    }\\n\\n    public function handle($request) {\\n        $request = $this->transform($request);\\n        if ($this->nextHandler) {\\n            $this->nextHandler->handle($request);\\n        }\\n    }\\n\\n    private function transform($request) {\\n        // Lógica de transformación\\n        return $request;\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra cómo el Chain of Responsibility Pattern procesa solicitudes a través de múltiples manejadores.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h3, null, \"15. Patrón Decorator\"), \"\\n\", React.createElement(_components.p, null, \"El \", React.createElement(_components.strong, null, \"Decorator Pattern\"), \" agrega comportamiento a objetos individuales sin afectar a otros objetos de la misma clase. Laravel lo utiliza en los Middlewares.\"), \"\\n\", React.createElement(_components.h4, null, \"Ventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Flexibilidad\"), \": Agrega comportamiento sin modificar el código existente.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Responsabilidad Única\"), \": Cada middleware maneja una tarea específica (autenticación, registro).\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Desventajas:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Complejidad\"), \": Middlewares profundamente anidados pueden complicar la depuración.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Sobrecarga de Rendimiento\"), \": Demasiadas capas de middleware pueden ralentizar el procesamiento de solicitudes.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, null, \"Caso de Uso:\"), \"\\n\", React.createElement(_components.p, null, \"Agregar verificaciones de autenticación a rutas específicas.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-php\"\n  }, \"// Ejemplo de uso del Decorator Pattern (Middleware)\\nclass Authenticate {\\n    public function handle($request, $next) {\\n        if (!$this->checkAuth($request)) {\\n            return redirect('login');\\n        }\\n        return $next($request);\\n    }\\n\\n    private function checkAuth($request) {\\n        // Lógica de autenticación\\n        return true;\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Este ejemplo muestra cómo el Decorator Pattern agrega comportamiento dinámicamente.\"), \"\\n\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.h2, null, \"Conclusión\"), \"\\n\", React.createElement(_components.p, null, \"Los patrones de diseño son herramientas esenciales para cualquier desarrollador que trabaje con Laravel. Al utilizarlos correctamente, puedes mejorar la calidad de tu código, hacerlo más mantenible y prepararlo para futuras expansiones. Ya sea que estés trabajando con patrones de creación, estructurales o de comportamiento, cada uno tiene su lugar en el ecosistema de Laravel y puede marcar una gran diferencia en tus proyectos.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/mnt/Datos/php.ar/blog/content/posts/15-patrones-diseno-laravel-guia-completa/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","hr","h2","h3","strong","h4","ul","li","pre","code","blockquote","_provideComponents","components","React","className","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}