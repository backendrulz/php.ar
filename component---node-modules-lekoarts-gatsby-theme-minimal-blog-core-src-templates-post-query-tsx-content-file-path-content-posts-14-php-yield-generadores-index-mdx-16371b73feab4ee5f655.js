"use strict";(self.webpackChunkminimal_blog=self.webpackChunkminimal_blog||[]).push([[775],{9813:function(e,n,a){a.r(n),a.d(n,{Head:function(){return l.p},default:function(){return c}});var t=a(6540),o=a(8453);function r(e){const n=Object.assign({p:"p",code:"code",pre:"pre",strong:"strong",a:"a"},(0,o.RP)(),e.components);return t.createElement(t.Fragment,null,t.createElement(n.p,null,"Hoy me enfrenté a un desafío: necesitaba escribir un comando para procesar registros almacenados en una base de datos remota. Para listar los registros, utilicé el método ",t.createElement(n.code,null,"fetchRecords"),", que interactúa directamente con una API RESTful:"),"\n",t.createElement(n.pre,null,t.createElement(n.code,{className:"language-php"},"ApiClient::create('database', $config)\n ->fetchRecords([\n     'Table' => 'usuarios',\n     'Limit' => 1000,\n ]);\n")),"\n",t.createElement(n.p,null,"Este método devuelve hasta mil registros por solicitud. Pero, dado que la tabla contiene cientos de miles de filas, necesitaba una forma de hacer múltiples llamadas para obtener todos los datos. En bases de datos ",t.createElement(n.strong,null,"SQL"),", esto se logra fácilmente con ",t.createElement(n.code,null,"LIMIT")," y ",t.createElement(n.code,null,"OFFSET"),". Sin embargo, ¿cómo manejarlo cuando trabajamos con ",t.createElement(n.strong,null,"APIs")," ",t.createElement(n.strong,null,"HTTP"),"?"),"\n",t.createElement(n.p,null,"Por suerte, la ",t.createElement(n.strong,null,"API")," incluye un parámetro llamado ",t.createElement(n.code,null,"NextPageToken"),", que permite obtener páginas adicionales de resultados. Este token se incluye en cada respuesta cuando hay más datos disponibles. Así que decidí implementar algo como esto:"),"\n",t.createElement(n.pre,null,t.createElement(n.code,{className:"language-php"},"public function handle(): void\n{\n $apiClient = ApiClient::create('database', $config);\n $nextPageToken = null;\n\n do {\n     $response = $apiClient->fetchRecords([\n         'Table' => 'usuarios',\n         'NextPageToken' => $nextPageToken,\n     ]);\n\n     foreach ($response->get('Data') as $registro) {\n         $this->procesarRegistro($registro);\n     }\n\n     $nextPageToken = $response->get('NextPageToken');\n     $hayMasResultados = $response->get('HasMore');\n } while ($hayMasResultados);\n}\n")),"\n",t.createElement(n.p,null,"Aquí, el campo ",t.createElement(n.code,null,"HasMore")," indica si quedan más resultados por recuperar, mientras que ",t.createElement(n.code,null,"NextPageToken")," nos da un puntero para continuar la paginación."),"\n",t.createElement(n.p,null,"Sin embargo, extraer los registros de la ",t.createElement(n.strong,null,"API")," es solo una parte de lo que necesito hacer. No quería que todo este código complicado llenara el método principal de mi comando. Prefería algo más limpio, como esto:"),"\n",t.createElement(n.pre,null,t.createElement(n.code,{className:"language-php"},"public function handle(): void\n{\n foreach ($this->obtenerRegistros() as $registro) {\n     $this->procesarRegistro($registro);\n }\n}\n")),"\n",t.createElement(n.p,null,"Una opción podría ser mover el bucle ",t.createElement(n.code,null,"do-while")," a un método separado y devolver todos los resultados en un ",t.createElement(n.strong,null,"array"),". Pero dado que estamos trabajando con cientos de miles de registros, esta solución no es práctica. Necesitaba una forma de encapsular las llamadas ",t.createElement(n.strong,null,"HTTP")," en un método independiente, mientras iteraba sobre los resultados de manera eficiente. Aquí es donde entra en juego ",t.createElement(n.code,null,"yield"),"."),"\n",t.createElement(n.pre,null,t.createElement(n.code,{className:"language-php"},"public function handle(): void\n{\n $this->apiClient = ApiClient::create('database', $config);\n\n foreach ($this->obtenerRegistros() as $registro) {\n     $this->procesarRegistro($registro);\n }\n}\n\n// El tipo de retorno del método ahora es iterable\nprivate function obtenerRegistros(): iterable\n{\n $nextPageToken = null;\n\n do {\n     $respuesta = $this->apiClient->fetchRecords([\n         'Table' => 'usuarios',\n         'NextPageToken' => $nextPageToken,\n     ]);\n\n     foreach ($respuesta->get('Data') as $fila) {\n         // Usamos yield para entregar los resultados uno a uno\n         yield $fila;\n     }\n\n     $nextPageToken = $respuesta->get('NextPageToken');\n     $hayMasResultados = $respuesta->get('HasMore');\n } while ($hayMasResultados);\n}\n")),"\n",t.createElement(n.p,null,"Al usar ",t.createElement(n.code,null,"yield")," en lugar de ",t.createElement(n.code,null,"return"),", convertimos este método en un ",t.createElement(n.a,{href:"https://www.php.net/manual/es/language.generators.overview.php"},"Generador"),". Cuando un método utiliza ",t.createElement(n.code,null,"return"),", todo su contexto se descarta después de devolver el resultado. Con ",t.createElement(n.code,null,"yield"),", en cambio, el estado del generador se conserva entre llamadas. Esto significa que podemos pausar y reanudar la ejecución del método, paginando los resultados de manera eficiente según sea necesario."),"\n",t.createElement(n.p,null,"Este enfoque nos permite iterar sobre cada registro en la tabla, procesándolos uno por uno, mientras realizamos llamadas adicionales a la API para obtener más resultados cuando sea necesario."),"\n",t.createElement(n.p,null,"Me sorprende que haya pasado tantos años sin necesitar esta herramienta, pero ahora tengo un recurso más en mi repertorio para futuros proyectos. Si quieres saber más sobre ",t.createElement(n.code,null,"yield"),", puedes consultar la ",t.createElement(n.a,{href:"https://www.php.net/manual/es/language.generators.syntax.php#control-structures.yield"},"documentación oficial de PHP sobre generadores"),"."))}var s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,o.RP)(),e.components);return n?t.createElement(n,e,t.createElement(r,e)):r(e)},l=a(7292);function c(e){return t.createElement(l.A,e,t.createElement(s,e))}l.A}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-14-php-yield-generadores-index-mdx-16371b73feab4ee5f655.js.map